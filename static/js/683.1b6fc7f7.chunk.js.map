{"version":3,"file":"static/js/683.1b6fc7f7.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/client/Contacts/ContactForm/contactForm.module.css?aca0","client/Contacts/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/client/Contacts/Filter/filter.module.css?27a0","client/Contacts/Filter/Filter.jsx","webpack://react-homework-template/./src/client/Contacts/ContactList/contactList.module.css?8013","client/Contacts/ContactList/ContactList.jsx","webpack://react-homework-template/./src/client/Contacts/contacts.module.css?154b","redux/contacts/contacts-selectors.js","client/Contacts/Contacts.jsx","webpack://react-homework-template/./src/pages/ContactsPage/contactsPage.module.css?6e18","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"contactForm_container__Ue-Sj\",\"label\":\"contactForm_label__Cwp4u\",\"input\":\"contactForm_input__7kQyQ\",\"btn\":\"contactForm_btn__IkjOa\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './contactForm.module.css';\n\nconst ContactForm = ({ addContact }) => {\n  const [contact, setContact] = useState({\n    name: '',\n    number: '',\n  });\n\n  const { name, number } = contact;\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setContact({\n      ...contact,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addContact({ ...contact });\n    setContact({ name: '', number: '' });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.container}>\n        <label htmlFor={nanoid()} className={s.label}>\n          Name\n        </label>\n        <input\n          className={s.input}\n          id={nanoid()}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          onChange={handleChange}\n          required\n        />\n      </div>\n      <div className={s.container}>\n        <label htmlFor={nanoid()} className={s.label}>\n          Number\n        </label>\n        <input\n          className={s.input}\n          id={nanoid()}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          onChange={handleChange}\n          required\n        />\n      </div>\n      <button type=\"submit\" className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.defaultProps = {\n  onSubmit: function () {},\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"filter_container__ivncE\",\"label\":\"filter_label__SzIM9\",\"input\":\"filter_input__WiFvA\"};","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport s from './filter.module.css';\n\nconst Filter = ({ filter, filterContact }) => {\n  const loginInputId = nanoid();\n\n  return (\n    <div className={s.container}>\n      <label htmlFor={loginInputId} className={s.label}>\n        Find contacts by name\n      </label>\n      <input\n        onChange={filterContact}\n        value={filter}\n        type=\"text\"\n        name=\"filter\"\n        className={s.input}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filterContact: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contactList_list__efgop\",\"item\":\"contactList_item__lS8QF\",\"btn\":\"contactList_btn__iNF11\"};","import PropTypes from 'prop-types';\nimport s from './contactList.module.css';\n\nconst ContactList = ({ contacts, removeContact }) => {\n  const elements = contacts.map(item => (\n    <li key={item.id} className={s.item}>\n      {item.name}: {item.number}\n      <button onClick={() => removeContact(item.id)} className={s.btn}>\n        Delete\n      </button>\n    </li>\n  ));\n  return <ul className={s.list}>{elements}</ul>;\n};\n\nexport default ContactList;\n\nContactList.defaultProps = {\n  contacts: [],\n  removeContact: function () {},\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"contacts_container__msqck\",\"phonebook\":\"contacts_phonebook__95VhS\",\"title\":\"contacts_title__y5oy3\",\"contacts__title\":\"contacts_contacts__title__7dKNH\"};","export const getContacts = ({ contacts }) => contacts.items;\nexport const getError = ({ contacts }) => contacts.error;\nexport const getLoading = ({ contacts }) => contacts.loading;\n","import { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useEffect, useCallback, useState } from 'react';\n\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\nimport ContactList from './ContactList';\nimport s from './contacts.module.css';\n\nimport {\n  getContacts,\n  getLoading,\n  getError,\n} from 'redux/contacts/contacts-selectors';\nimport * as operations from '../../redux/contacts/contacts-operations';\n\nconst Contacts = () => {\n  const contacts = useSelector(getContacts, shallowEqual);\n  const loading = useSelector(getLoading, shallowEqual);\n  const error = useSelector(getError, shallowEqual);\n\n  const [filter, setFilter] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, [dispatch]);\n\n  const addContact = data => {\n    dispatch(operations.addContact(data));\n  };\n\n  const filterContact = useCallback(\n    ({ target }) => setFilter(target.value),\n    [setFilter]\n  );\n  const filteredName = filter.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) => {\n    const result = name.toLowerCase().includes(filteredName);\n    return result;\n  });\n\n  const removeContact = id => {\n    dispatch(operations.removeContact(id));\n  };\n\n  return (\n    <div className={s.container}>\n      <div className={s.phonebook}>\n        <ContactForm addContact={addContact} />\n      </div>\n      <div className={s.contacts}>\n        <h2 className={s.contacts__title}>Contacts</h2>\n        <Filter filter={filter} filterContact={filterContact} />\n        {loading && <p>...loading</p>}\n        {error && <p>{error.message}</p>}\n        {Boolean(filteredContacts.length) && (\n          <ContactList\n            contacts={filteredContacts}\n            removeContact={removeContact}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"contactsPage_title__yXES0\"};","import Contacts from 'client/Contacts';\nimport s from './contactsPage.module.css';\n\nconst ContactsPage = () => {\n  return (\n    <main>\n      <div>\n        <h2 className={s.title}>Phonebook</h2>\n        <Contacts />\n      </div>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","addContact","useState","name","number","contact","setContact","handleChange","target","value","onSubmit","e","preventDefault","className","s","htmlFor","type","pattern","onChange","required","defaultProps","filter","filterContact","loginInputId","ContactList","contacts","removeContact","elements","map","item","onClick","getContacts","items","getError","error","getLoading","loading","useSelector","shallowEqual","setFilter","dispatch","useDispatch","useEffect","operations","useCallback","filteredName","toLowerCase","filteredContacts","includes","data","message","Boolean","length"],"sourceRoot":""}